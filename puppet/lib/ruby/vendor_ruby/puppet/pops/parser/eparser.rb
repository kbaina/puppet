#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 865)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'76,78,297,-285,61,71,146,72,341,297,471,-280,394,297,169,300,-283,-271',
'146,264,286,127,300,298,21,20,127,395,406,149,298,52,-142,55,298,67',
'12,290,59,44,47,149,54,45,10,11,-285,170,62,19,287,342,46,133,-280,17',
'18,126,133,-283,-271,265,126,83,412,128,446,146,413,53,128,445,-143',
'43,79,-142,81,82,80,405,-144,60,49,68,69,63,64,65,66,56,149,-145,58',
'76,78,70,318,61,71,319,72,415,129,130,131,132,404,129,130,131,132,445',
'-183,-183,127,-143,403,21,20,127,460,95,123,-144,52,-140,55,390,67,138',
'-225,59,44,47,-145,54,45,277,276,76,78,62,19,171,421,46,133,297,17,18',
'126,133,-184,-184,423,126,83,456,128,455,-185,-185,53,128,135,136,43',
'79,-140,81,82,-186,-186,391,60,49,68,69,63,64,65,66,56,-186,-186,58',
'76,78,70,95,61,71,456,72,455,129,130,131,132,266,129,130,131,132,390',
'-180,-180,127,322,321,21,20,127,333,334,-184,-184,52,87,55,430,67,12',
'378,59,44,47,85,54,45,10,11,297,431,62,19,-183,-183,46,133,199,17,18',
'126,133,300,-182,-182,126,83,339,128,340,298,434,53,128,277,276,43,79',
'196,81,82,297,-180,-180,60,49,68,69,63,64,65,66,56,279,300,58,76,78',
'70,437,61,71,298,72,386,129,130,131,132,390,129,130,131,132,277,276',
'331,127,-181,-181,21,20,127,135,136,277,276,52,390,55,280,67,12,376',
'59,44,47,152,54,45,10,11,297,281,62,19,-185,-185,46,133,194,17,18,126',
'133,300,440,447,126,83,448,128,449,298,450,53,128,152,382,43,79,284',
'81,82,453,380,457,60,49,68,69,63,64,65,66,56,459,375,58,76,78,70,285',
'61,71,371,72,504,129,130,131,132,369,129,130,131,132,368,468,347,127',
'289,409,21,20,127,312,339,313,161,52,161,55,316,67,12,475,59,44,47,316',
'54,45,10,11,320,477,62,19,339,153,46,133,480,17,18,126,133,481,339,152',
'126,83,95,128,339,87,95,53,128,486,459,43,79,488,81,82,489,490,491,60',
'49,68,69,63,64,65,66,56,339,95,58,76,78,70,495,61,71,496,72,502,129',
'130,131,132,497,129,130,131,132,498,499,500,127,95,95,21,20,127,87,508',
'509,84,52,-270,55,511,67,12,512,59,44,47,513,54,45,10,11,371,,62,19',
',,46,133,,17,18,126,133,,,,126,83,,128,,,,53,128,,,43,79,-270,81,82',
',,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,187,129,130,131',
'132,,129,130,131,132,,,,127,,,21,20,127,,,,,52,,55,,67,12,,59,44,47',
',54,45,10,11,,,62,19,,,46,133,,17,18,126,133,,,,126,83,,128,,,,53,128',
',,43,79,,81,82,,,,176,173,68,69,63,64,65,66,174,183,182,175,76,78,70',
',61,71,,72,,129,130,131,132,,129,130,131,132,,,,,,,21,20,,,76,78,,52',
'171,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,',
',,,169,53,,166,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,83,58,76',
'78,70,,61,71,,72,170,79,,,115,,88,89,90,76,78,,,171,,,21,20,117,,120',
',114,52,116,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,119,,17,18',
'169,,,166,,,83,91,93,92,94,,53,,,,43,79,96,81,82,,,83,60,49,68,69,63',
'64,65,66,56,170,79,58,76,78,70,,61,71,,72,494,,,,115,,,,,76,78,,,171',
',,21,20,117,,120,,114,52,116,55,,67,12,,59,44,47,,54,45,10,11,,,62,19',
',,46,119,,17,18,169,,,166,,,83,76,78,,,171,53,,,,43,79,96,81,82,,,83',
'60,49,68,69,63,64,65,66,56,170,79,58,76,78,70,,61,71,,72,,,,169,115',
',166,,,,,,,,,,21,20,117,,120,,114,52,116,55,83,67,138,,59,44,47,,54',
'45,170,79,,,62,19,115,,46,119,,17,18,,,,,,,83,117,,120,,114,53,116,',
',43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,119,58,76,78,70,115,61',
'71,,72,,,,,115,97,98,,,117,,120,96,114,,116,21,20,117,,120,,114,52,116',
'55,,67,138,,59,44,47,,54,45,119,,,,62,19,,,46,119,,17,18,,,97,98,,,83',
',,96,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70',
'115,61,71,,72,,,,,115,,,,,117,,120,,114,,116,21,20,117,,120,,114,52',
'116,55,,67,138,,59,44,47,,54,45,119,,,,62,19,,,46,119,,17,18,,,97,98',
',,83,,,96,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76',
'78,70,115,61,71,,72,,,,,,,,,,117,,120,,114,,116,21,20,,,,,,52,,55,,67',
'138,,59,44,47,,54,45,119,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43',
'79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,',
',,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19',
',,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43',
'79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,340',
',,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,',
'46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,145,,,,,52,,55',
',67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53',
',,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,',
'72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,',
',62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69',
'63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52',
',55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53',
',,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,',
'72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,',
',62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69',
'63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52',
',55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53',
',,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,',
'72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64',
'65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,',
'43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72',
',,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64',
'65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,',
'43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72',
',,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19',
',,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79',
',81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,',
',,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66',
'56,,,58,76,78,70,,61,71,,72,310,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43',
'79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,',
',,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19',
',,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43',
'79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,',
',,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19',
',,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,461,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,',
'43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72',
',,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64',
'65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,',
'43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,178',
'72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,',
',62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,176,173,68,69',
'63,64,65,66,174,183,182,175,76,78,70,,61,71,185,72,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,',
',,,,83,,,,,,53,,,,43,79,,81,82,,,,176,173,68,69,63,64,65,66,174,183',
'182,175,76,78,70,,61,71,,72,187,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43',
'79,,81,82,,,,176,173,68,69,63,64,65,66,174,183,182,175,76,78,70,,61',
'71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10',
'11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68',
'69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,302',
',,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,',
'83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78',
'70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54',
'45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49',
'68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,198,,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83',
',,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70',
',61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45',
',,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68',
'69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,',
',,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83',
',,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70',
',61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45',
',,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68',
'69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,',
',,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83',
',,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70',
',61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45',
'10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49',
'68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,',
',83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78',
'70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54',
'45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60',
'49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,',
',,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76',
'78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47',
',54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,',
',,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,',
',,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17',
'18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,',
'58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,216,234,226,235,67,228,237,229,44,214,,218,212,,,,',
'62,19,238,233,213,,,17,211,,,,,,,83,,,,,236,217,,,,43,79,,81,82,,,,230',
'215,231,232,221,222,223,224,227,239,,58,76,78,70,,61,71,,72,,,,,,,,',
',,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,',
'17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56',
',,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,',
'59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17',
'18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,',
'58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59',
'44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82',
',,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,',
',,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18',
',,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58',
'76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44',
'47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,',
',60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,',
',21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,',
',,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76',
'78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47',
',54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60',
'49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78',
'70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54',
'45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49',
'68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83',
',,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70',
',61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45',
',,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68',
'69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,',
',,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,',
',,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61',
'71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,',
',,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69',
'63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52',
',55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53',
',,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,',
'72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64',
'65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,',
'43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72',
',,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19',
',,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,261,43',
'79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,',
',,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,',
'46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79',
',81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,',
',,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66',
'56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138',
',59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17',
'18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,',
'58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59',
'44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82',
',,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,',
',,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17',
'18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,',
'58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59',
'44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82',
',,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,',
',,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17',
'18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,176,173,68,69,63,64,65,66,174',
'183,182,175,76,78,70,,61,71,,72,416,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53',
',,,43,79,,81,82,,,,176,173,68,69,63,64,65,66,174,183,182,175,76,78,70',
',61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45',
'10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,176,173',
'68,69,63,64,65,66,174,183,182,175,76,78,70,,61,71,,72,,,,,,,,,,,,,,',
',,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18',
',,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58',
'76,78,70,,61,71,,72,399,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,397,,,,,,',
',,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66',
'56,,,58,76,78,70,,61,71,,72,388,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43',
'79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,',
',,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19',
',,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79',
',81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,',
',,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66',
'56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12',
',59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79',
',81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,',
',,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66',
'56,115,,58,,,70,,,,,,,111,106,117,,120,,114,,116,,107,109,108,110,,',
',,,,,,,,,,,,,119,,,,113,112,,115,99,100,102,101,104,105,,97,98,,,111',
'106,117,96,120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,,,103,113',
'112,,,99,100,102,101,104,105,115,97,98,,,,,,96,,,,111,106,117,372,120',
',114,,116,,107,109,108,110,,,,,,,,,,,,103,,,,119,,,,113,112,,115,99',
'100,102,101,104,105,,97,98,,,111,106,117,96,120,,114,,116,,107,109,108',
'110,,,,,,,,,,,,,,,,119,,,103,113,112,,,99,100,102,101,104,105,,97,98',
'115,,303,,,96,,,,,,,111,106,117,,120,,114,,116,,107,109,108,110,,,,',
',,,,103,,,,,,,119,,,,113,112,,,99,100,102,101,104,105,,97,98,115,,304',
',,96,,,,,,,111,106,117,,120,,114,,116,,107,109,108,110,,,,,,,,,103,',
',,,,,119,,,,113,112,,,99,100,102,101,104,105,,97,98,115,,305,,,96,,',
',,,,111,106,117,,120,,114,,116,,107,109,108,110,,,,,,,,,103,,,,,,,119',
',,,113,112,,,99,100,102,101,104,105,115,97,98,,,343,,,96,,,,111,106',
'117,,120,,114,,116,,107,109,108,110,,,,,,,,,,,,103,,,,119,,,,113,112',
',115,99,100,102,101,104,105,,97,98,,,111,106,117,96,120,,114,,116,,107',
'109,108,110,,,,,,,,,,,,,,,,119,,,103,,112,,115,99,100,102,101,104,105',
',97,98,,,111,106,117,96,120,,114,,116,,107,109,108,110,,,,,,,,,,,,,',
',,119,,,103,,,,115,99,100,102,101,104,105,,97,98,,,111,106,117,96,120',
'115,114,,116,,107,109,108,110,,,,,106,117,,120,,114,,116,,107,,119,',
',103,113,112,,,99,100,102,101,104,105,,97,98,119,,,,,96,,115,99,100',
'102,101,104,105,,97,98,,,,106,117,96,120,115,114,,116,,107,,,,,103,',
',106,117,,120,,114,,116,,107,,119,,,103,,,,,99,100,102,101,104,105,',
'97,98,119,,,,,96,,115,99,100,102,101,104,105,,97,98,,,,106,117,96,120',
'115,114,,116,,107,,,,,103,,,,117,,120,,114,,116,,,,119,,,103,,,,,99',
'100,102,101,104,105,,97,98,119,,,115,,96,,,99,100,102,101,104,105,,97',
'98,117,,120,,114,96,116,,,,115,,,,,,,103,,,,,,,117,,120,119,114,,116',
',,,103,99,100,102,101,104,105,,97,98,,,,,,96,,119,,,115,,,,,99,100,102',
'101,,,,97,98,117,,120,115,114,96,116,,,,103,,115,,,,,117,,120,,114,',
'116,,,117,119,120,,114,,116,,103,99,100,102,101,,,,97,98,119,,,,,96',
',,,119,102,101,,,,97,98,,,102,101,,96,115,97,98,,,,,,96,,,103,111,106',
'117,,120,,114,,116,,107,109,108,110,,,103,,,,,,,,,103,,,,119,,,,113',
'112,,115,99,100,102,101,104,105,,97,98,,,111,106,117,96,120,,114,,116',
',107,109,108,110,,,,,,,,,,,,,,,,119,,,103,113,112,,,99,100,102,101,104',
'105,115,97,98,,,,,,96,,,,111,106,117,337,120,,114,,116,,107,109,108',
'110,,,,,,,,,,,,103,,,,119,,,,113,112,,115,99,100,102,101,104,105,,97',
'98,,,111,106,117,96,120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119',
',,103,113,112,,115,99,100,102,101,104,105,,97,98,,,111,106,117,96,120',
',114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,,,103,113,112,,115,99',
'100,102,101,104,105,,97,98,,,111,106,117,96,120,,114,,116,,107,109,108',
'110,,,,,,,,,,,,,,,,119,,,103,113,112,,115,99,100,102,101,104,105,,97',
'98,,,111,106,117,96,120,,114,,116,,107,109,108,110,333,334,,,,,,,,,',
',,,,119,,,103,113,112,,115,99,100,102,101,104,105,,97,98,,,111,106,117',
'96,120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,,,103,113,112,',
',99,100,102,101,104,105,,97,98,,359,234,358,235,96,356,237,360,,349',
',355,357,,,,,,,238,233,361,,,,354,,,,,,,,103,,,,236,362,,,,,,,,,,,,365',
'363,366,364,350,351,352,353,367,239,359,234,358,235,,356,237,360,,349',
',355,357,,,,,,,238,233,361,,,,354,,,,,,,,,,,,236,362,,,,,,,,,,,,365',
'363,366,364,350,351,352,353,367,239,359,234,358,235,,356,237,360,,349',
',355,357,,,,,,,238,233,361,,,,354,,,,,,,,,,,,236,362,,,,,,,,,,,,365',
'363,366,364,350,351,352,353,367,239,359,234,358,235,,356,237,360,,349',
',355,357,,,,,,,238,233,361,,,,354,,,,,,,,,,,,236,362,,,,,,,,,,,,365',
'363,366,364,350,351,352,353,367,239,359,234,358,235,,356,237,360,,349',
',355,357,,,,,,,238,233,361,,,,354,,,,,,,,,,,,236,362,,,,,,,,,,,,365',
'363,366,364,350,351,352,353,367,239,359,234,358,235,,356,237,360,,349',
',355,357,,,,,,,238,233,361,,,,354,,,,,,,,,,,,236,362,,,,,,,,,,,,365',
'363,366,364,350,351,352,353,367,239' ]
        racc_action_table = arr = ::Array.new(10365, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,152,231,0,0,215,0,225,390,420,213,301,299,313,152,232,212,49,117',
'149,230,390,152,0,0,160,301,309,215,390,0,221,0,299,0,0,152,0,0,0,49',
'0,0,0,0,231,313,0,0,149,225,0,230,213,0,0,230,160,232,212,117,160,0',
'314,230,383,173,315,0,160,383,222,0,0,221,0,0,0,308,223,0,0,0,0,0,0',
'0,0,0,173,224,0,497,497,0,186,497,497,186,497,317,230,230,230,230,307',
'160,160,160,160,400,221,221,60,222,306,497,497,12,400,122,12,223,497',
'214,497,330,497,497,335,497,497,497,224,497,497,172,172,194,194,497',
'497,194,336,497,60,298,497,497,60,12,222,222,338,12,497,453,60,453,223',
'223,497,12,57,57,497,497,214,497,497,224,224,297,497,497,497,497,497',
'497,497,497,497,66,66,497,4,4,497,121,4,4,397,4,397,60,60,60,60,118',
'12,12,12,12,291,214,214,134,191,191,4,4,138,421,421,64,64,4,86,4,344',
'4,4,277,4,4,4,4,4,4,4,4,277,346,4,4,63,63,4,134,84,4,4,134,138,277,62',
'62,138,4,348,134,354,277,370,4,138,159,159,4,4,80,4,4,196,47,47,4,4',
'4,4,4,4,4,4,4,141,196,4,489,489,4,373,489,489,196,489,287,134,134,134',
'134,377,138,138,138,138,124,124,196,375,61,61,489,489,174,16,16,158',
'158,489,379,489,142,489,489,276,489,489,489,382,489,489,489,489,276',
'144,489,489,65,65,489,375,79,489,489,375,174,276,375,385,174,489,386',
'375,387,276,389,489,174,145,282,489,489,147,489,489,396,278,398,489',
'489,489,489,489,489,489,489,489,399,274,489,488,488,489,148,488,488',
'271,488,488,375,375,375,375,270,174,174,174,174,268,407,263,176,151',
'311,488,488,55,162,422,164,175,488,58,488,177,488,488,429,488,488,488',
'184,488,488,488,488,189,433,488,488,436,51,488,176,441,488,488,176,55',
'442,443,50,55,488,205,176,210,200,208,488,55,456,457,488,488,459,488',
'488,460,463,466,488,488,488,488,488,488,488,488,488,467,207,488,486',
'486,488,470,486,486,473,486,486,176,176,176,176,474,55,55,55,55,479',
'482,483,56,8,206,486,486,228,5,492,493,1,486,228,486,501,486,486,503',
'486,486,486,505,486,486,486,486,510,,486,486,,,486,56,,486,486,56,228',
',,,228,486,,56,,,,486,228,,,486,486,228,486,486,,,,486,486,486,486,486',
'486,486,486,486,,,486,198,198,486,,198,198,,198,198,56,56,56,56,,228',
'228,228,228,,,,227,,,198,198,226,,,,,198,,198,,198,198,,198,198,198',
',198,198,198,198,,,198,198,,,198,227,,198,198,227,226,,,,226,198,,227',
',,,198,226,,,198,198,,198,198,,,,198,198,198,198,198,198,198,198,198',
'198,198,198,10,10,198,,10,10,,10,,227,227,227,227,,226,226,226,226,',
',,,,,10,10,,,312,312,,10,312,10,,10,10,,10,10,10,,10,10,10,10,,,10,10',
',,10,,,10,10,,,,,,,10,,,,,312,10,,312,,10,10,,10,10,,,,10,10,10,10,10',
'10,10,10,10,,312,10,11,11,10,,11,11,,11,312,312,,,242,,7,7,7,409,409',
',,409,,,11,11,242,,242,,242,11,242,11,,11,11,,11,11,11,,11,11,11,11',
',,11,11,,,11,242,,11,11,409,,,409,,,11,7,7,7,7,,11,,,,11,11,242,11,11',
',,409,11,11,11,11,11,11,11,11,11,409,409,11,468,468,11,,468,468,,468',
'468,,,,241,,,,,59,59,,,59,,,468,468,241,,241,,241,468,241,468,,468,468',
',468,468,468,,468,468,468,468,,,468,468,,,468,241,,468,468,59,,,59,',
',468,229,229,,,229,468,,,,468,468,241,468,468,,,59,468,468,468,468,468',
'468,468,468,468,59,59,468,455,455,468,,455,455,,455,,,,229,139,,229',
',,,,,,,,,455,455,139,,139,,139,455,139,455,229,455,455,,455,455,455',
',455,455,229,229,,,455,455,246,,455,139,,455,455,,,,,,,455,246,,246',
',246,455,246,,,455,455,,455,455,,,,455,455,455,455,455,455,455,455,455',
',246,455,17,17,455,247,17,17,,17,,,,,137,246,246,,,247,,247,246,247',
',247,17,17,137,,137,,137,17,137,17,,17,17,,17,17,17,,17,17,247,,,,17',
'17,,,17,137,,17,17,,,247,247,,,17,,,247,,,17,,,,17,17,,17,17,,,,17,17',
'17,17,17,17,17,17,17,,,17,18,18,17,245,18,18,,18,,,,,140,,,,,245,,245',
',245,,245,18,18,140,,140,,140,18,140,18,,18,18,,18,18,18,,18,18,245',
',,,18,18,,,18,140,,18,18,,,245,245,,,18,,,245,,,18,,,,18,18,,18,18,',
',,18,18,18,18,18,18,18,18,18,,,18,19,19,18,240,19,19,,19,,,,,,,,,,240',
',240,,240,,240,19,19,,,,,,19,,19,,19,19,,19,19,19,,19,19,240,,,,19,19',
',,19,,,19,19,,,,,,,19,,,,,,19,,,,19,19,,19,19,,,,19,19,19,19,19,19,19',
'19,19,,,19,20,20,19,,20,20,,20,,,,,,,,,,,,,,,,,20,20,,,,,,20,,20,,20',
'20,,20,20,20,,20,20,20,20,,,20,20,,,20,,,20,20,,,,,,,20,,,,,,20,,,,20',
'20,,20,20,,,,20,20,20,20,20,20,20,20,20,,,20,21,21,20,,21,21,,21,,,',
',,,,,,,,,,,,,21,21,,,,,,21,,21,,21,21,,21,21,21,,21,21,21,21,,,21,21',
',,21,,,21,21,,,,,,,21,,,,,,21,,,,21,21,,21,21,,,,21,21,21,21,21,21,21',
'21,21,,,21,211,211,21,,211,211,,211,,,211,,,,,,,,,,,,,,211,211,,,,,',
'211,,211,,211,211,,211,211,211,,211,211,,,,,211,211,,,211,,,211,211',
',,,,,,211,,,,,,211,,,,211,211,,211,211,,,,211,211,211,211,211,211,211',
'211,211,,,211,48,48,211,,48,48,,48,,,,,,,,,,,,,,,,,48,48,48,,,,,48,',
'48,,48,48,,48,48,48,,48,48,48,48,,,48,48,,,48,,,48,48,,,,,,,48,,,,,',
'48,,,,48,48,,48,48,,,,48,48,48,48,48,48,48,48,48,,,48,448,448,48,,448',
'448,,448,,,,,,,,,,,,,,,,,448,448,,,,,,448,,448,,448,448,,448,448,448',
',448,448,448,448,,,448,448,,,448,,,448,448,,,,,,,448,,,,,,448,,,,448',
'448,,448,448,,,,448,448,448,448,448,448,448,448,448,,,448,445,445,448',
',445,445,,445,,,,,,,,,,,,,,,,,445,445,,,,,,445,,445,,445,445,,445,445',
'445,,445,445,,,,,445,445,,,445,,,445,445,,,,,,,445,,,,,,445,,,,445,445',
',445,445,,,,445,445,445,445,445,445,445,445,445,,,445,437,437,445,,437',
'437,,437,,,,,,,,,,,,,,,,,437,437,,,,,,437,,437,,437,437,,437,437,437',
',437,437,437,437,,,437,437,,,437,,,437,437,,,,,,,437,,,,,,437,,,,437',
'437,,437,437,,,,437,437,437,437,437,437,437,437,437,,,437,52,52,437',
',52,52,,52,,,,,,,,,,,,,,,,,52,52,,,,,,52,,52,,52,52,,52,52,52,,52,52',
',,,,52,52,,,52,,,52,52,,,,,,,52,,,,,,52,,,,52,52,,52,52,,,,52,52,52',
'52,52,52,52,52,52,,,52,53,53,52,,53,53,,53,,,,,,,,,,,,,,,,,53,53,,,',
',,53,,53,,53,53,,53,53,53,,53,53,,,,,53,53,,,53,,,53,53,,,,,,,53,,,',
',,53,,,,53,53,,53,53,,,,53,53,53,53,53,53,53,53,53,,,53,54,54,53,,54',
'54,,54,,,,,,,,,,,,,,,,,54,54,,,,,,54,,54,,54,54,,54,54,54,,54,54,,,',
',54,54,,,54,,,54,54,,,,,,,54,,,,,,54,,,,54,54,,54,54,,,,54,54,54,54',
'54,54,54,54,54,,,54,195,195,54,,195,195,,195,,,,,,,,,,,,,,,,,195,195',
',,,,,195,,195,,195,195,,195,195,195,,195,195,195,195,,,195,195,,,195',
',,195,195,,,,,,,195,,,,,,195,,,,195,195,,195,195,,,,195,195,195,195',
'195,195,195,195,195,,,195,430,430,195,,430,430,,430,,,,,,,,,,,,,,,,',
'430,430,,,,,,430,,430,,430,430,,430,430,430,,430,430,,,,,430,430,,,430',
',,430,430,,,,,,,430,,,,,,430,,,,430,430,,430,430,,,,430,430,430,430',
'430,430,430,430,430,,,430,216,216,430,,216,216,,216,,,,,,,,,,,,,,,,',
'216,216,,,,,,216,,216,,216,216,,216,216,216,,216,216,,,,,216,216,,,216',
',,216,216,,,,,,,216,,,,,,216,,,,216,216,,216,216,,,,216,216,216,216',
'216,216,216,216,216,,,216,217,217,216,,217,217,,217,,,,,,,,,,,,,,,,',
'217,217,,,,,,217,,217,,217,217,,217,217,217,,217,217,,,,,217,217,,,217',
',,217,217,,,,,,,217,,,,,,217,,,,217,217,,217,217,,,,217,217,217,217',
'217,217,217,217,217,,,217,218,218,217,,218,218,,218,,,,,,,,,,,,,,,,',
'218,218,,,,,,218,,218,,218,218,,218,218,218,,218,218,,,,,218,218,,,218',
',,218,218,,,,,,,218,,,,,,218,,,,218,218,,218,218,,,,218,218,218,218',
'218,218,218,218,218,,,218,161,161,218,,161,161,,161,161,,,,,,,,,,,,',
',,,161,161,,,,,,161,,161,,161,161,,161,161,161,,161,161,161,161,,,161',
'161,,,161,,,161,161,,,,,,,161,,,,,,161,,,,161,161,,161,161,,,,161,161',
'161,161,161,161,161,161,161,,,161,412,412,161,,412,412,,412,,,,,,,,',
',,,,,,,,412,412,,,,,,412,,412,,412,412,,412,412,412,,412,412,412,412',
',,412,412,,,412,,,412,412,,,,,,,412,,,,,,412,,,,412,412,,412,412,,,',
'412,412,412,412,412,412,412,412,412,,,412,404,404,412,,404,404,,404',
',,,,,,,,,,,,,,,,404,404,,,,,,404,,404,,404,404,,404,404,404,,404,404',
'404,404,,,404,404,,,404,,,404,404,,,,,,,404,,,,,,404,,,,404,404,,404',
'404,,,,404,404,404,404,404,404,404,404,404,,,404,403,403,404,,403,403',
',403,,,,,,,,,,,,,,,,,403,403,,,,,,403,,403,,403,403,,403,403,403,,403',
'403,403,403,,,403,403,,,403,,,403,403,,,,,,,403,,,,,,403,,,,403,403',
',403,403,,,,403,403,403,403,403,403,403,403,403,,,403,401,401,403,,401',
'401,,401,401,,,,,,,,,,,,,,,,401,401,,,,,,401,,401,,401,401,,401,401',
'401,,401,401,,,,,401,401,,,401,,,401,401,,,,,,,401,,,,,,401,,,,401,401',
',401,401,,,,401,401,401,401,401,401,401,401,401,,,401,394,394,401,,394',
'394,,394,,,,,,,,,,,,,,,,,394,394,,,,,,394,,394,,394,394,,394,394,394',
',394,394,394,394,,,394,394,,,394,,,394,394,,,,,,,394,,,,,,394,,,,394',
'394,,394,394,,,,394,394,394,394,394,394,394,394,394,,,394,391,391,394',
',391,391,,391,,,,,,,,,,,,,,,,,391,391,,,,,,391,,391,,391,391,,391,391',
'391,,391,391,,,,,391,391,,,391,,,391,391,,,,,,,391,,,,,,391,,,,391,391',
',391,391,,,,391,391,391,391,391,391,391,391,391,,,391,70,70,391,,70',
'70,70,70,,,,,,,,,,,,,,,,,70,70,,,,,,70,,70,,70,70,,70,70,70,,70,70,70',
'70,,,70,70,,,70,,,70,70,,,,,,,70,,,,,,70,,,,70,70,,70,70,,,,70,70,70',
'70,70,70,70,70,70,70,70,70,71,71,70,,71,71,71,71,,,,,,,,,,,,,,,,,71',
'71,,,,,,71,,71,,71,71,,71,71,71,,71,71,71,71,,,71,71,,,71,,,71,71,,',
',,,,71,,,,,,71,,,,71,71,,71,71,,,,71,71,71,71,71,71,71,71,71,71,71,71',
'72,72,71,,72,72,,72,72,,,,,,,,,,,,,,,,72,72,,,,,,72,,72,,72,72,,72,72',
'72,,72,72,72,72,,,72,72,,,72,,,72,72,,,,,,,72,,,,,,72,,,,72,72,,72,72',
',,,72,72,72,72,72,72,72,72,72,72,72,72,77,77,72,,77,77,,77,,,,,,,,,',
',,,,,,,77,77,,,,,,77,,77,,77,77,,77,77,77,,77,77,77,77,,,77,77,,,77',
',,77,77,,,,,,,77,,,,,,77,,,,77,77,,77,77,,,,77,77,77,77,77,77,77,77',
'77,,,77,153,153,77,,153,153,,153,,,,,,,,,,,,,,,,,153,153,153,,,,,153',
',153,,153,153,,153,153,153,,153,153,153,153,,,153,153,,,153,,,153,153',
',,,,,,153,,,,,,153,,,,153,153,,153,153,,,,153,153,153,153,153,153,153',
'153,153,,,153,371,371,153,,371,371,,371,,,,,,,,,,,,,,,,,371,371,,,,',
',371,,371,,371,371,,371,371,371,,371,371,,,,,371,371,,,371,,,371,371',
',,,,,,371,,,,,,371,,,,371,371,,371,371,,,,371,371,371,371,371,371,371',
'371,371,,,371,82,82,371,,82,82,,82,,,,,,,,,,,,,,,,,82,82,,,,,,82,,82',
',82,82,,82,82,82,,82,82,,,,,82,82,,,82,,,82,82,,,,,,,82,,,,,,82,,,,82',
'82,,82,82,,,,82,82,82,82,82,82,82,82,82,,,82,347,347,82,,347,347,,347',
',,,,,,,,,,,,,,,,347,347,,,,,,347,,347,,347,347,,347,347,347,,347,347',
',,,,347,347,,,347,,,347,347,,,,,,,347,,,,,,347,,,,347,347,,347,347,',
',,347,347,347,347,347,347,347,347,347,,,347,85,85,347,,85,85,,85,,,',
',,,,,,,,,,,,,85,85,,,,,,85,,85,,85,85,,85,85,85,,85,85,85,85,,,85,85',
',,85,,,85,85,,,,,,,85,,,,,,85,,,,85,85,,85,85,,,,85,85,85,85,85,85,85',
'85,85,,,85,343,343,85,,343,343,,343,,,,,,,,,,,,,,,,,343,343,,,,,,343',
',343,,343,343,,343,343,343,,343,343,,,,,343,343,,,343,,,343,343,,,,',
',,343,,,,,,343,,,,343,343,,343,343,,,,343,343,343,343,343,343,343,343',
'343,,,343,87,87,343,,87,87,,87,,,,,,,,,,,,,,,,,87,87,,,,,,87,,87,,87',
'87,,87,87,87,,87,87,87,87,,,87,87,,,87,,,87,87,,,,,,,87,,,,,,87,,,,87',
'87,,87,87,,,,87,87,87,87,87,87,87,87,87,,,87,88,88,87,,88,88,,88,,,',
',,,,,,,,,,,,,88,88,,,,,,88,,88,,88,88,,88,88,88,,88,88,88,88,,,88,88',
',,88,,,88,88,,,,,,,88,,,,,,88,,,,88,88,,88,88,,,,88,88,88,88,88,88,88',
'88,88,,,88,89,89,88,,89,89,,89,,,,,,,,,,,,,,,,,89,89,,,,,,89,,89,,89',
'89,,89,89,89,,89,89,89,89,,,89,89,,,89,,,89,89,,,,,,,89,,,,,,89,,,,89',
'89,,89,89,,,,89,89,89,89,89,89,89,89,89,,,89,90,90,89,,90,90,,90,,,',
',,,,,,,,,,,,,90,90,,,,,,90,,90,,90,90,,90,90,90,,90,90,90,90,,,90,90',
',,90,,,90,90,,,,,,,90,,,,,,90,,,,90,90,,90,90,,,,90,90,90,90,90,90,90',
'90,90,,,90,91,91,90,,91,91,,91,,,,,,,,,,,,,,,,,91,91,,,,,,91,,91,,91',
'91,,91,91,91,,91,91,91,91,,,91,91,,,91,,,91,91,,,,,,,91,,,,,,91,,,,91',
'91,,91,91,,,,91,91,91,91,91,91,91,91,91,,,91,92,92,91,,92,92,,92,,,',
',,,,,,,,,,,,,92,92,,,,,,92,,92,,92,92,,92,92,92,,92,92,92,92,,,92,92',
',,92,,,92,92,,,,,,,92,,,,,,92,,,,92,92,,92,92,,,,92,92,92,92,92,92,92',
'92,92,,,92,93,93,92,,93,93,,93,,,,,,,,,,,,,,,,,93,93,,,,,,93,,93,,93',
'93,,93,93,93,,93,93,93,93,,,93,93,,,93,,,93,93,,,,,,,93,,,,,,93,,,,93',
'93,,93,93,,,,93,93,93,93,93,93,93,93,93,,,93,94,94,93,,94,94,,94,,,',
',,,,,,,,,,,,,94,94,,,,,,94,,94,,94,94,,94,94,94,,94,94,94,94,,,94,94',
',,94,,,94,94,,,,,,,94,,,,,,94,,,,94,94,,94,94,,,,94,94,94,94,94,94,94',
'94,94,,,94,95,95,94,,95,95,,95,,,,,,,,,,,,,,,,,95,95,,,,,,95,95,95,95',
'95,95,95,95,95,95,,95,95,,,,,95,95,95,95,95,,,95,95,,,,,,,95,,,,,95',
'95,,,,95,95,,95,95,,,,95,95,95,95,95,95,95,95,95,95,,95,96,96,95,,96',
'96,,96,,,,,,,,,,,,,,,,,96,96,,,,,,96,,96,,96,96,,96,96,96,,96,96,,,',
',96,96,,,96,,,96,96,,,,,,,96,,,,,,96,,,,96,96,,96,96,,,,96,96,96,96',
'96,96,96,96,96,,,96,97,97,96,,97,97,,97,,,,,,,,,,,,,,,,,97,97,,,,,,97',
',97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,,,,97,,,,,,97',
',,,97,97,,97,97,,,,97,97,97,97,97,97,97,97,97,,,97,98,98,97,,98,98,',
'98,,,,,,,,,,,,,,,,,98,98,,,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98',
'98,,,98,,,98,98,,,,,,,98,,,,,,98,,,,98,98,,98,98,,,,98,98,98,98,98,98',
'98,98,98,,,98,99,99,98,,99,99,,99,,,,,,,,,,,,,,,,,99,99,,,,,,99,,99',
',99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,,,99,,,,,,99,,,,99',
'99,,99,99,,,,99,99,99,99,99,99,99,99,99,,,99,100,100,99,,100,100,,100',
',,,,,,,,,,,,,,,,100,100,,,,,,100,,100,,100,100,,100,100,100,,100,100',
',,,,100,100,,,100,,,100,100,,,,,,,100,,,,,,100,,,,100,100,,100,100,',
',,100,100,100,100,100,100,100,100,100,,,100,101,101,100,,101,101,,101',
',,,,,,,,,,,,,,,,101,101,,,,,,101,,101,,101,101,,101,101,101,,101,101',
',,,,101,101,,,101,,,101,101,,,,,,,101,,,,,,101,,,,101,101,,101,101,',
',,101,101,101,101,101,101,101,101,101,,,101,102,102,101,,102,102,,102',
',,,,,,,,,,,,,,,,102,102,,,,,,102,,102,,102,102,,102,102,102,,102,102',
',,,,102,102,,,102,,,102,102,,,,,,,102,,,,,,102,,,,102,102,,102,102,',
',,102,102,102,102,102,102,102,102,102,,,102,103,103,102,,103,103,,103',
',,,,,,,,,,,,,,,,103,103,,,,,,103,,103,,103,103,,103,103,103,,103,103',
',,,,103,103,,,103,,,103,103,,,,,,,103,,,,,,103,,,,103,103,,103,103,',
',,103,103,103,103,103,103,103,103,103,,,103,104,104,103,,104,104,,104',
',,,,,,,,,,,,,,,,104,104,,,,,,104,,104,,104,104,,104,104,104,,104,104',
',,,,104,104,,,104,,,104,104,,,,,,,104,,,,,,104,,,,104,104,,104,104,',
',,104,104,104,104,104,104,104,104,104,,,104,105,105,104,,105,105,,105',
',,,,,,,,,,,,,,,,105,105,,,,,,105,,105,,105,105,,105,105,105,,105,105',
',,,,105,105,,,105,,,105,105,,,,,,,105,,,,,,105,,,,105,105,,105,105,',
',,105,105,105,105,105,105,105,105,105,,,105,106,106,105,,106,106,,106',
',,,,,,,,,,,,,,,,106,106,,,,,,106,,106,,106,106,,106,106,106,,106,106',
',,,,106,106,,,106,,,106,106,,,,,,,106,,,,,,106,,,,106,106,,106,106,',
',,106,106,106,106,106,106,106,106,106,,,106,107,107,106,,107,107,,107',
',,,,,,,,,,,,,,,,107,107,,,,,,107,,107,,107,107,,107,107,107,,107,107',
',,,,107,107,,,107,,,107,107,,,,,,,107,,,,,,107,,,,107,107,,107,107,',
',,107,107,107,107,107,107,107,107,107,,,107,108,108,107,,108,108,,108',
',,,,,,,,,,,,,,,,108,108,,,,,,108,,108,,108,108,,108,108,108,,108,108',
',,,,108,108,,,108,,,108,108,,,,,,,108,,,,,,108,,,,108,108,,108,108,',
',,108,108,108,108,108,108,108,108,108,,,108,109,109,108,,109,109,,109',
',,,,,,,,,,,,,,,,109,109,,,,,,109,,109,,109,109,,109,109,109,,109,109',
',,,,109,109,,,109,,,109,109,,,,,,,109,,,,,,109,,,,109,109,,109,109,',
',,109,109,109,109,109,109,109,109,109,,,109,110,110,109,,110,110,,110',
',,,,,,,,,,,,,,,,110,110,,,,,,110,,110,,110,110,,110,110,110,,110,110',
',,,,110,110,,,110,,,110,110,,,,,,,110,,,,,,110,,,,110,110,,110,110,',
',,110,110,110,110,110,110,110,110,110,,,110,111,111,110,,111,111,,111',
',,,,,,,,,,,,,,,,111,111,,,,,,111,,111,,111,111,,111,111,111,,111,111',
',,,,111,111,,,111,,,111,111,,,,,,,111,,,,,,111,,,,111,111,,111,111,',
',,111,111,111,111,111,111,111,111,111,,,111,112,112,111,,112,112,,112',
',,,,,,,,,,,,,,,,112,112,,,,,,112,,112,,112,112,,112,112,112,,112,112',
',,,,112,112,,,112,,,112,112,,,,,,,112,,,,,,112,,,,112,112,,112,112,',
',,112,112,112,112,112,112,112,112,112,,,112,113,113,112,,113,113,,113',
',,,,,,,,,,,,,,,,113,113,,,,,,113,,113,,113,113,,113,113,113,,113,113',
',,,,113,113,,,113,,,113,113,,,,,,,113,,,,,,113,,,,113,113,,113,113,',
',,113,113,113,113,113,113,113,113,113,,,113,114,114,113,,114,114,,114',
',,,,,,,,,,,,,,,,114,114,,,,,,114,,114,,114,114,,114,114,114,,114,114',
',,,,114,114,,,114,,,114,114,,,,,,,114,,,,,,114,,,114,114,114,,114,114',
',,,114,114,114,114,114,114,114,114,114,,,114,115,115,114,,115,115,,115',
',,,,,,,,,,,,,,,,115,115,,,,,,115,,115,,115,115,,115,115,115,,115,115',
',,,,115,115,,,115,,,115,115,,,,,,,115,,,,,,115,,,,115,115,,115,115,',
',,115,115,115,115,115,115,115,115,115,,,115,342,342,115,,342,342,,342',
',,,,,,,,,,,,,,,,342,342,,,,,,342,,342,,342,342,,342,342,342,,342,342',
',,,,342,342,,,342,,,342,342,,,,,,,342,,,,,,342,,,,342,342,,342,342,',
',,342,342,342,342,342,342,342,342,342,,,342,341,341,342,,341,341,,341',
',,,,,,,,,,,,,,,,341,341,,,,,,341,,341,,341,341,,341,341,341,,341,341',
',,,,341,341,,,341,,,341,341,,,,,,,341,,,,,,341,,,,341,341,,341,341,',
',,341,341,341,341,341,341,341,341,341,,,341,119,119,341,,119,119,,119',
',,,,,,,,,,,,,,,,119,119,,,,,,119,,119,,119,119,,119,119,119,,119,119',
',,,,119,119,,,119,,,119,119,,,,,,,119,,,,,,119,,,,119,119,,119,119,',
',,119,119,119,119,119,119,119,119,119,,,119,120,120,119,,120,120,,120',
',,,,,,,,,,,,,,,,120,120,,,,,,120,,120,,120,120,,120,120,120,,120,120',
',,,,120,120,,,120,,,120,120,,,,,,,120,,,,,,120,,,,120,120,,120,120,',
',,120,120,120,120,120,120,120,120,120,,,120,340,340,120,,340,340,,340',
',,,,,,,,,,,,,,,,340,340,,,,,,340,,340,,340,340,,340,340,340,,340,340',
',,,,340,340,,,340,,,340,340,,,,,,,340,,,,,,340,,,,340,340,,340,340,',
',,340,340,340,340,340,340,340,340,340,,,340,325,325,340,,325,325,,325',
',,,,,,,,,,,,,,,,325,325,,,,,,325,,325,,325,325,,325,325,325,,325,325',
'325,325,,,325,325,,,325,,,325,325,,,,,,,325,,,,,,325,,,,325,325,,325',
'325,,,,325,325,325,325,325,325,325,325,325,,,325,123,123,325,,123,123',
',123,,,,,,,,,,,,,,,,,123,123,,,,,,123,,123,,123,123,,123,123,123,,123',
'123,,,,,123,123,,,123,,,123,123,,,,,,,123,,,,,,123,,,,123,123,,123,123',
',,,123,123,123,123,123,123,123,123,123,,,123,320,320,123,,320,320,,320',
',,,,,,,,,,,,,,,,320,320,,,,,,320,,320,,320,320,,320,320,320,,320,320',
'320,320,,,320,320,,,320,,,320,320,,,,,,,320,,,,,,320,,,,320,320,,320',
'320,,,,320,320,320,320,320,320,320,320,320,320,320,320,319,319,320,',
'319,319,,319,319,,,,,,,,,,,,,,,,319,319,,,,,,319,,319,,319,319,,319',
'319,319,,319,319,319,319,,,319,319,,,319,,,319,319,,,,,,,319,,,,,,319',
',,,319,319,,319,319,,,,319,319,319,319,319,319,319,319,319,319,319,319',
'316,316,319,,316,316,,316,,,,,,,,,,,,,,,,,316,316,,,,,,316,,316,,316',
'316,,316,316,316,,316,316,316,316,,,316,316,,,316,,,316,316,,,,,,,316',
',,,,,316,,,,316,316,,316,316,,,,316,316,316,316,316,316,316,316,316',
'316,316,316,305,305,316,,305,305,,305,,,,,,,,,,,,,,,,,305,305,,,,,,305',
',305,,305,305,,305,305,305,,305,305,,,,,305,305,,,305,,,305,305,,,,',
',,305,,,,,,305,,,,305,305,,305,305,,,,305,305,305,305,305,305,305,305',
'305,,,305,304,304,305,,304,304,,304,304,,,,,,,,,,,,,,,,304,304,,,,,',
'304,,304,,304,304,,304,304,304,,304,304,304,304,,,304,304,,,304,,,304',
'304,,,,,,,304,,,,,,304,,,,304,304,,304,304,,,,304,304,304,304,304,304',
'304,304,304,,,304,303,303,304,,303,303,,303,303,,,,,,,,,,,,,,,,303,303',
',,,,,303,,303,,303,303,,303,303,303,,303,303,303,303,,,303,303,,,303',
',,303,303,,,,,,,303,,,,,,303,,,,303,303,,303,303,,,,303,303,303,303',
'303,303,303,303,303,,,303,289,289,303,,289,289,,289,289,,,,,,,,,,,,',
',,,289,289,,,,,,289,,289,,289,289,,289,289,289,,289,289,289,289,,,289',
'289,,,289,,,289,289,,,,,,,289,,,,,,289,,,,289,289,,289,289,,,,289,289',
'289,289,289,289,289,289,289,,,289,286,286,289,,286,286,,286,,,,,,,,',
',,,,,,,,286,286,,,,,,286,,286,,286,286,,286,286,286,,286,286,286,286',
',,286,286,,,286,,,286,286,,,,,,,286,,,,,,286,,,,286,286,,286,286,,,',
'286,286,286,286,286,286,286,286,286,,,286,285,285,286,,285,285,,285',
',,,,,,,,,,,,,,,,285,285,,,,,,285,,285,,285,285,,285,285,285,,285,285',
',,,,285,285,,,285,,,285,285,,,,,,,285,,,,,,285,,,,285,285,,285,285,',
',,285,285,285,285,285,285,285,285,285,,,285,261,261,285,,261,261,,261',
',,,,,,,,,,,,,,,,261,261,,,,,,261,,261,,261,261,,261,261,261,,261,261',
',,,,261,261,,,261,,,261,261,,,,,,,261,,,,,,261,,,,261,261,,261,261,',
',,261,261,261,261,261,261,261,261,261,,,261,281,281,261,,281,281,,281',
',,,,,,,,,,,,,,,,281,281,,,,,,281,,281,,281,281,,281,281,281,,281,281',
'281,281,,,281,281,,,281,,,281,281,,,,,,,281,,,,,,281,,,,281,281,,281',
'281,,,,281,281,281,281,281,281,281,281,281,,,281,284,284,281,,284,284',
',284,,,,,,,,,,,,,,,,,284,284,,,,,,284,,284,,284,284,,284,284,284,,284',
'284,,,,,284,284,,,284,,,284,284,,,,,,,284,,,,,,284,,,,284,284,,284,284',
',,,284,284,284,284,284,284,284,284,284,267,,284,,,284,,,,,,,267,267',
'267,,267,,267,,267,,267,267,267,267,,,,,,,,,,,,,,,,267,,,,267,267,,262',
'267,267,267,267,267,267,,267,267,,,262,262,262,267,262,,262,,262,,262',
'262,262,262,,,,,,,,,,,,,,,,262,,,267,262,262,,,262,262,262,262,262,262',
'272,262,262,,,,,,262,,,,272,272,272,272,272,,272,,272,,272,272,272,272',
',,,,,,,,,,,262,,,,272,,,,272,272,,384,272,272,272,272,272,272,,272,272',
',,384,384,384,272,384,,384,,384,,384,384,384,384,,,,,,,,,,,,,,,,384',
',,272,384,384,,,384,384,384,384,384,384,,384,384,154,,154,,,384,,,,',
',,154,154,154,,154,,154,,154,,154,154,154,154,,,,,,,,,384,,,,,,,154',
',,,154,154,,,154,154,154,154,154,154,,154,154,156,,156,,,154,,,,,,,156',
'156,156,,156,,156,,156,,156,156,156,156,,,,,,,,,154,,,,,,,156,,,,156',
'156,,,156,156,156,156,156,156,,156,156,157,,157,,,156,,,,,,,157,157',
'157,,157,,157,,157,,157,157,157,157,,,,,,,,,156,,,,,,,157,,,,157,157',
',,157,157,157,157,157,157,258,157,157,,,258,,,157,,,,258,258,258,,258',
',258,,258,,258,258,258,258,,,,,,,,,,,,157,,,,258,,,,258,258,,257,258',
'258,258,258,258,258,,258,258,,,257,257,257,258,257,,257,,257,,257,257',
'257,257,,,,,,,,,,,,,,,,257,,,258,,257,,256,257,257,257,257,257,257,',
'257,257,,,256,256,256,257,256,,256,,256,,256,256,256,256,,,,,,,,,,,',
',,,,256,,,257,,,,425,256,256,256,256,256,256,,256,256,,,425,425,425',
'256,425,255,425,,425,,425,425,425,425,,,,,255,255,,255,,255,,255,,255',
',425,,,256,425,425,,,425,425,425,425,425,425,,425,425,255,,,,,425,,254',
'255,255,255,255,255,255,,255,255,,,,254,254,255,254,253,254,,254,,254',
',,,,425,,,253,253,,253,,253,,253,,253,,254,,,255,,,,,254,254,254,254',
'254,254,,254,254,253,,,,,254,,252,253,253,253,253,253,253,,253,253,',
',,252,252,253,252,251,252,,252,,252,,,,,254,,,,251,,251,,251,,251,,',
',252,,,253,,,,,252,252,252,252,252,252,,252,252,251,,,250,,252,,,251',
'251,251,251,251,251,,251,251,250,,250,,250,251,250,,,,249,,,,,,,252',
',,,,,,249,,249,250,249,,249,,,,251,250,250,250,250,250,250,,250,250',
',,,,,250,,249,,,248,,,,,249,249,249,249,,,,249,249,248,,248,244,248',
'249,248,,,,250,,243,,,,,244,,244,,244,,244,,,243,248,243,,243,,243,',
'249,248,248,248,248,,,,248,248,244,,,,,248,,,,243,244,244,,,,244,244',
',,243,243,,244,426,243,243,,,,,,243,,,248,426,426,426,,426,,426,,426',
',426,426,426,426,,,244,,,,,,,,,243,,,,426,,,,426,426,,427,426,426,426',
'426,426,426,,426,426,,,427,427,427,426,427,,427,,427,,427,427,427,427',
',,,,,,,,,,,,,,,427,,,426,427,427,,,427,427,427,427,427,427,209,427,427',
',,,,,427,,,,209,209,209,209,209,,209,,209,,209,209,209,209,,,,,,,,,',
',,427,,,,209,,,,209,209,,432,209,209,209,209,209,209,,209,209,,,432',
'432,432,209,432,,432,,432,,432,432,432,432,,,,,,,,,,,,,,,,432,,,209',
'432,432,,452,432,432,432,432,432,432,,432,432,,,452,452,452,432,452',
',452,,452,,452,452,452,452,,,,,,,,,,,,,,,,452,,,432,452,452,,197,452',
'452,452,452,452,452,,452,452,,,197,197,197,452,197,,197,,197,,197,197',
'197,197,,,,,,,,,,,,,,,,197,,,452,197,197,,9,197,197,197,197,197,197',
',197,197,,,9,9,9,197,9,,9,,9,,9,9,9,9,197,197,,,,,,,,,,,,,,9,,,197,9',
'9,,428,9,9,9,9,9,9,,9,9,,,428,428,428,9,428,,428,,428,,428,428,428,428',
',,,,,,,,,,,,,,,428,,,9,428,428,,,428,428,428,428,428,428,,428,428,,339',
'339,339,339,428,339,339,339,,339,,339,339,,,,,,,339,339,339,,,,339,',
',,,,,,428,,,,339,339,,,,,,,,,,,,339,339,339,339,339,339,339,339,339',
'339,380,380,380,380,,380,380,380,,380,,380,380,,,,,,,380,380,380,,,',
'380,,,,,,,,,,,,380,380,,,,,,,,,,,,380,380,380,380,380,380,380,380,380',
'380,266,266,266,266,,266,266,266,,266,,266,266,,,,,,,266,266,266,,,',
'266,,,,,,,,,,,,266,266,,,,,,,,,,,,266,266,266,266,266,266,266,266,266',
'266,337,337,337,337,,337,337,337,,337,,337,337,,,,,,,337,337,337,,,',
'337,,,,,,,,,,,,337,337,,,,,,,,,,,,337,337,337,337,337,337,337,337,337',
'337,405,405,405,405,,405,405,405,,405,,405,405,,,,,,,405,405,405,,,',
'405,,,,,,,,,,,,405,405,,,,,,,,,,,,405,405,405,405,405,405,405,405,405',
'405,372,372,372,372,,372,372,372,,372,,372,372,,,,,,,372,372,372,,,',
'372,,,,,,,,,,,,372,372,,,,,,,,,,,,372,372,372,372,372,372,372,372,372',
'372' ]
        racc_action_check = arr = ::Array.new(10365, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   495,   nil,   nil,   184,   479,   nil,   742,   478,  9891,
   649,   742,   113,   nil,   nil,   nil,   214,  1021,  1114,  1207,
  1300,  1393,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   173,  1579,    -9,
   361,   396,  1951,  2044,  2137,   392,   480,    72,   395,   852,
   108,   209,   154,   144,   123,   237,    91,   nil,   nil,   nil,
  3346,  3439,  3532,   nil,   nil,   nil,   nil,  3625,   nil,   256,
   189,   nil,  3904,   nil,   240,  4090,   205,  4276,  4369,  4462,
  4555,  4648,  4741,  4834,  4927,  5020,  5113,  5206,  5299,  5392,
  5485,  5578,  5671,  5764,  5857,  5950,  6043,  6136,  6229,  6322,
  6415,  6508,  6601,  6694,  6787,  6880,   nil,   -23,   190,  7159,
  7252,   180,   112,  7531,   271,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   201,   nil,   nil,  1028,   206,   935,
  1121,   248,   285,   nil,   313,   278,   nil,   347,   359,    11,
   nil,   385,   -35,  3718,  8941,   nil,  8999,  9057,   282,   231,
    20,  2695,   386,   nil,   380,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   111,    40,   299,   393,   387,   393,   nil,   nil,
   nil,   nil,   nil,   nil,   400,   nil,    86,   nil,   nil,   406,
   nil,   204,   nil,   nil,   137,  2230,   227,  9843,   556,   nil,
   426,   nil,   nil,   nil,   nil,   427,   479,   454,   431,  9699,
   425,  1486,     5,    -1,   113,   -21,  2416,  2509,  2602,   nil,
   nil,    20,    60,    68,    79,    -4,   578,   573,   485,   899,
    15,    -9,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1205,   842,   749,  9541,  9532,  1112,   973,  1019,  9515,  9471,
  9447,  9403,  9386,  9338,  9321,  9273,  9208,  9160,  9112,   nil,
   nil,  8461,  8780,   379,   nil,   nil, 10092,  8732,   341,   nil,
   361,   335,  8835,   nil,   331,   nil,   288,   195,   349,   nil,
   nil,  8554,   323,   nil,  8647,  8368,  8275,   237,   nil,  8182,
   nil,   191,   nil,   nil,   nil,   nil,   nil,   157,   110,   -24,
   nil,    -1,   nil,  8089,  7996,  7903,   107,    97,    70,    18,
   nil,   356,   677,   -28,    55,    60,  7810,    93,   nil,  7717,
  7624,   nil,   nil,   nil,   nil,  7438,   nil,   nil,   nil,   nil,
   114,   nil,   nil,   nil,   nil,   118,   134, 10152,   144,  9972,
  7345,  7066,  6973,  4183,   207,   nil,   225,  3997,   237,   nil,
   nil,   nil,   nil,   nil,   240,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   244,  3811, 10272,   273,   nil,   294,   nil,   279,   nil,   298,
 10032,   nil,   248,    58,  8883,   330,   334,   335,   nil,   275,
   -28,  3253,   nil,   nil,  3160,   nil,   347,   158,   349,   335,
    98,  3067,   nil,  2974,  2881, 10212,   nil,   382,   nil,   759,
   nil,   nil,  2788,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -62,   132,   387,   nil,   nil,  9256,  9596,  9644,  9939,   399,
  2323,   nil,  9747,   409,   nil,   nil,   409,  1858,   nil,   nil,
   nil,   398,   403,   419,   nil,  1765,   nil,   nil,  1672,   nil,
   nil,   nil,  9795,   123,   nil,   928,   434,   410,   nil,   438,
   441,   nil,   nil,   441,   nil,   nil,   442,   449,   835,   nil,
   458,   nil,   nil,   461,   435,   nil,   nil,   nil,   nil,   473,
   nil,   nil,   474,   475,   nil,   nil,   463,   nil,   370,   277,
   nil,   nil,   483,   484,   nil,   nil,   nil,    91,   nil,   nil,
   nil,   489,   nil,   492,   nil,   496,   nil,   nil,   nil,   nil,
   468,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -289,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -289,  -289,  -187,   -33,   -34,   -35,   -36,  -289,  -289,  -289,
  -289,  -289,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -85,   -86,   -87,   -88,   -89,  -289,  -289,
   -96,  -100,  -289,  -289,  -289,  -289,  -289,  -289,  -289,  -289,
  -289,  -239,  -262,  -211,  -212,  -213,  -214,  -208,  -209,  -210,
  -289,  -289,  -289,  -235,  -236,  -237,  -238,  -289,  -241,  -289,
  -254,  -257,  -289,  -263,  -289,  -289,    -7,  -289,  -289,  -289,
  -289,  -289,  -289,  -289,  -289,  -137,  -289,  -289,  -289,  -289,
  -289,  -289,  -289,  -289,  -289,  -289,  -289,  -289,  -289,  -289,
  -289,  -289,  -289,  -289,  -289,  -289,   -94,  -289,  -132,  -288,
  -288,   -22,   -23,  -289,  -288,  -156,  -180,  -181,  -182,  -183,
  -184,  -185,  -186,  -187,  -289,  -153,  -154,   -47,  -187,   -48,
   -55,  -289,  -289,   -14,  -264,   -91,   -95,  -203,  -289,  -262,
   -97,  -289,  -289,  -289,  -289,  -108,  -289,  -289,  -288,  -288,
  -289,  -289,  -264,  -167,  -169,  -170,  -171,  -172,  -173,  -175,
  -176,  -239,  -288,  -229,  -231,  -234,  -230,  -264,  -216,  -225,
  -226,  -227,  -232,  -233,  -264,  -218,  -289,  -221,  -222,  -289,
  -240,  -289,  -245,  -248,  -289,  -252,  -289,  -289,  -289,   515,
    -6,    -9,   -11,   -12,   -13,   -17,   -18,   -19,   -20,  -289,
  -264,  -289,   -87,   -88,   -89,  -282,  -275,  -281,  -269,  -138,
  -141,  -211,  -212,  -213,  -214,  -289,  -272,  -286,  -187,  -278,
  -284,  -209,  -210,  -268,  -273,  -274,  -276,  -277,  -279,  -287,
   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,   -45,   -46,
   -49,   -50,   -51,   -52,   -53,   -54,   -56,   -57,  -289,   -58,
  -126,  -289,   -62,  -264,  -101,  -102,  -137,  -136,  -289,  -135,
  -289,  -266,  -289,   -28,  -288,  -188,  -289,  -289,  -289,   -59,
   -60,  -265,  -289,   -93,  -289,  -289,  -252,  -289,  -103,  -289,
  -106,  -264,  -193,  -195,  -196,  -197,  -198,  -200,  -289,  -289,
  -262,  -289,   -99,  -289,  -289,  -289,  -289,  -289,  -289,  -289,
  -164,  -288,  -265,  -289,  -289,  -289,  -265,  -289,  -219,  -289,
  -289,  -242,  -243,  -244,  -246,  -289,  -249,  -250,  -251,  -253,
  -264,  -255,  -258,  -260,  -261,    -8,  -289,  -137,  -289,  -265,
  -289,  -289,  -289,  -289,  -264,  -128,  -289,  -265,  -264,  -140,
  -142,  -143,  -144,  -145,  -289,  -269,  -270,  -271,  -272,  -275,
  -278,  -280,  -281,  -282,  -283,  -284,  -285,  -286,  -133,  -134,
  -289,  -267,  -137,  -289,  -159,  -289,  -189,  -264,  -190,  -264,
  -137,   -15,   -90,  -289,  -205,  -289,  -289,  -289,  -105,  -289,
  -265,  -289,  -201,  -202,  -289,   -98,  -289,  -111,  -289,  -117,
  -289,  -289,  -121,  -288,  -288,  -137,  -163,  -289,  -177,  -289,
  -168,  -174,  -288,  -215,  -228,  -217,  -220,  -223,  -224,  -247,
  -289,  -289,  -264,   -26,  -139,  -148,  -146,  -147,  -130,  -289,
  -265,   -61,   -63,  -289,   -25,   -29,  -264,  -288,  -160,  -161,
  -162,  -289,  -289,  -264,   -92,  -289,  -204,  -206,  -252,  -104,
  -107,  -194,  -199,  -111,  -110,  -289,  -289,  -117,  -116,  -289,
  -289,  -120,  -122,  -289,  -157,  -158,  -289,  -264,  -289,  -178,
  -289,  -256,  -259,  -289,   -30,  -127,  -129,  -131,   -27,  -289,
  -191,  -192,  -289,  -289,  -109,  -112,  -289,  -115,  -289,  -288,
  -149,  -150,  -289,  -289,  -166,  -179,   -24,   -31,  -155,  -152,
  -207,  -289,  -114,  -289,  -119,  -289,  -124,  -125,  -151,  -165,
  -266,  -113,  -118,  -123,   -32 ]

racc_goto_table = [
     2,   271,   137,   139,   140,   125,   141,   142,   167,   165,
   147,   150,   328,   260,   370,   269,   269,   332,   181,   181,
   263,   148,   291,   190,   144,   410,    86,   402,   121,   122,
   274,   134,   268,   270,   143,   210,   438,   154,   156,   157,
   177,   184,   344,   458,   473,   435,   454,   373,   158,   159,
   424,   407,   505,   172,   411,   451,   179,   179,   179,   393,
   392,   401,   485,   192,   306,   307,   330,   197,   288,   417,
   259,   326,   160,   201,   202,   203,   204,   327,   314,     3,
   209,   240,   241,   242,   243,   244,   245,   246,   247,   248,
   249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
   262,   487,   484,   385,   267,   267,   283,   200,   272,   205,
   206,   207,   208,   147,   324,   463,   466,   325,   323,   193,
   195,     1,   469,   462,   470,   nil,   nil,   278,   nil,   301,
   nil,   125,   nil,   nil,   147,   nil,   nil,   nil,   nil,   143,
   nil,   nil,   nil,   nil,   nil,   148,   377,   379,   nil,   479,
   nil,   nil,   nil,   308,   nil,   nil,   nil,   147,   nil,   nil,
   345,   309,   nil,   nil,   nil,   nil,   nil,   159,   nil,   172,
   374,   nil,   nil,   nil,   nil,   nil,   147,   nil,   167,   165,
   nil,   nil,   nil,   nil,   335,   nil,   nil,   148,   nil,   383,
   nil,   282,   nil,   nil,   nil,   329,   139,   nil,   336,   nil,
   nil,   154,   156,   157,   nil,   nil,   348,   408,   nil,   311,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   158,
   159,   125,   nil,   172,   315,   nil,   nil,   nil,   nil,   nil,
   nil,   317,   nil,   nil,   nil,   nil,   nil,   147,   147,   nil,
   nil,   472,   nil,   nil,   nil,   nil,   258,   nil,   nil,   nil,
   nil,   nil,   nil,   514,   nil,   nil,   nil,   338,   nil,   nil,
   nil,   167,   165,   nil,   414,   483,   nil,   381,   418,   262,
   384,   419,   nil,   nil,   nil,   nil,   nil,   422,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   329,   nil,   nil,   387,
   262,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   465,
   465,   nil,   179,   396,   398,   179,   179,   nil,   465,   nil,
   346,   192,   436,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   443,   nil,   nil,   nil,   nil,   425,   426,   427,   428,   476,
   nil,   nil,   432,   465,   nil,   nil,   nil,   nil,   389,   nil,
   nil,   nil,   nil,   444,   nil,   467,   nil,   nil,   nil,   nil,
   nil,   147,   nil,   nil,   nil,   nil,   272,   nil,   167,   165,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   439,   nil,
   nil,   nil,   nil,   nil,   nil,   510,   452,   420,   nil,   nil,
   381,   nil,   nil,   nil,   nil,   506,   262,   nil,   nil,   nil,
   nil,   429,   nil,   nil,   nil,   433,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   258,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   441,   nil,   442,   nil,   nil,   nil,
   432,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   154,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   329,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   493,   474,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   272,   478,   nil,   nil,   501,   nil,   503,   507,
   482,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   492 ]

racc_goto_check = [
     2,    13,    10,    10,    10,    65,     6,     6,    41,    42,
    43,    45,    83,    58,    14,    57,    57,   100,    87,    87,
    22,    82,    50,    93,     8,    74,     5,    55,     9,     9,
    66,    68,    61,    61,     6,    11,    71,    10,    10,    10,
    84,    84,    59,    53,    12,    16,    52,    70,    65,    65,
    62,    73,    56,    65,    76,    77,     6,     6,     6,    78,
    80,    54,    51,     6,    66,    66,    50,    10,    49,    86,
    21,    89,    68,     6,     6,     6,     6,    90,    66,     3,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    53,    52,    83,    10,    10,    45,     5,    10,     9,
     9,     9,     9,    43,    94,    67,    67,    95,    97,    98,
    99,     1,    74,    55,    67,   nil,   nil,    65,   nil,     8,
   nil,    65,   nil,   nil,    43,   nil,   nil,   nil,   nil,     6,
   nil,   nil,   nil,   nil,   nil,    82,    50,    50,   nil,    67,
   nil,   nil,   nil,    65,   nil,   nil,   nil,    43,   nil,   nil,
    58,     2,   nil,   nil,   nil,   nil,   nil,    65,   nil,    65,
    57,   nil,   nil,   nil,   nil,   nil,    43,   nil,    41,    42,
   nil,   nil,   nil,   nil,     6,   nil,   nil,    82,   nil,    22,
   nil,    15,   nil,   nil,   nil,     2,    10,   nil,     2,   nil,
   nil,    10,    10,    10,   nil,   nil,    11,    57,   nil,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    65,
    65,    65,   nil,    65,    15,   nil,   nil,   nil,   nil,   nil,
   nil,    15,   nil,   nil,   nil,   nil,   nil,    43,    43,   nil,
   nil,   100,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,   nil,    14,   nil,   nil,   nil,    15,   nil,   nil,
   nil,    41,    42,   nil,    87,    83,   nil,     6,    87,    10,
    10,    93,   nil,   nil,   nil,   nil,   nil,    11,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,     2,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57,
    57,   nil,     6,     2,     2,     6,     6,   nil,    57,   nil,
    15,     6,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    11,   nil,   nil,   nil,   nil,    10,    10,    10,    10,    58,
   nil,   nil,    10,    57,   nil,   nil,   nil,   nil,    15,   nil,
   nil,   nil,   nil,    45,   nil,    11,   nil,   nil,   nil,   nil,
   nil,    43,   nil,   nil,   nil,   nil,    10,   nil,    41,    42,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    65,   nil,
   nil,   nil,   nil,   nil,   nil,    13,    10,    15,   nil,   nil,
     6,   nil,   nil,   nil,   nil,    57,    10,   nil,   nil,   nil,
   nil,    15,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    15,   nil,    15,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,    15,   nil,   nil,     2,   nil,     2,     2,
    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    15 ]

racc_goto_pointer = [
   nil,   121,     0,    79,   nil,    22,   -14,   nil,   -24,    18,
   -15,   -60,  -378,  -122,  -257,    47,  -326,   nil,   nil,   nil,
   nil,   -44,   -95,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -51,   -50,   -39,   nil,   -39,   nil,   nil,   nil,   -83,
  -130,  -393,  -351,  -356,  -244,  -278,  -437,  -104,  -101,  -219,
   nil,   -87,  -289,   nil,   nil,    -7,   -94,  -288,    15,   nil,
  -227,  -339,   nil,  -260,  -287,   nil,  -259,  -335,  -240,   nil,
  -238,   nil,   -28,  -183,   -30,   nil,  -250,   -52,   nil,  -123,
  -117,   nil,   nil,   -54,   -77,   -74,   nil,   -73,    40,    40,
  -180 ]

racc_goto_default = [
   nil,   nil,   464,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   273,    13,    14,    15,
    16,   nil,   400,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    48,   nil,    50,    51,   151,   nil,
   nil,   155,   nil,   nil,   nil,   nil,   nil,   275,   nil,   nil,
   118,   nil,   219,   225,   220,    57,   nil,   nil,   nil,   124,
   nil,   nil,   162,   nil,   163,   164,   168,   292,   293,   294,
   295,   296,   299,   nil,   nil,   186,   188,   189,   180,    73,
    74,    75,    77,   nil,   nil,   nil,   191,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 101, :_reduce_1,
  1, 101, :_reduce_2,
  0, 101, :_reduce_3,
  1, 102, :_reduce_4,
  1, 104, :_reduce_5,
  3, 104, :_reduce_6,
  2, 104, :_reduce_7,
  1, 105, :_reduce_8,
  3, 105, :_reduce_9,
  1, 106, :_reduce_none,
  3, 106, :_reduce_11,
  3, 106, :_reduce_12,
  3, 106, :_reduce_13,
  1, 108, :_reduce_14,
  3, 108, :_reduce_15,
  1, 107, :_reduce_none,
  3, 107, :_reduce_17,
  3, 107, :_reduce_18,
  3, 107, :_reduce_19,
  3, 107, :_reduce_20,
  1, 109, :_reduce_none,
  2, 109, :_reduce_22,
  2, 109, :_reduce_23,
  7, 109, :_reduce_24,
  5, 109, :_reduce_25,
  5, 109, :_reduce_26,
  4, 116, :_reduce_27,
  1, 113, :_reduce_28,
  3, 113, :_reduce_29,
  1, 112, :_reduce_30,
  2, 112, :_reduce_31,
  4, 112, :_reduce_32,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  3, 110, :_reduce_37,
  3, 110, :_reduce_38,
  3, 110, :_reduce_39,
  3, 110, :_reduce_40,
  3, 110, :_reduce_41,
  3, 110, :_reduce_42,
  3, 110, :_reduce_43,
  3, 110, :_reduce_44,
  3, 110, :_reduce_45,
  3, 110, :_reduce_46,
  2, 110, :_reduce_47,
  2, 110, :_reduce_48,
  3, 110, :_reduce_49,
  3, 110, :_reduce_50,
  3, 110, :_reduce_51,
  3, 110, :_reduce_52,
  3, 110, :_reduce_53,
  3, 110, :_reduce_54,
  2, 110, :_reduce_55,
  3, 110, :_reduce_56,
  3, 110, :_reduce_57,
  3, 110, :_reduce_58,
  3, 110, :_reduce_59,
  3, 110, :_reduce_60,
  5, 120, :_reduce_61,
  1, 122, :_reduce_62,
  3, 122, :_reduce_63,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_85,
  1, 117, :_reduce_86,
  1, 117, :_reduce_87,
  1, 117, :_reduce_88,
  1, 117, :_reduce_89,
  4, 119, :_reduce_90,
  2, 119, :_reduce_91,
  5, 119, :_reduce_92,
  3, 119, :_reduce_93,
  2, 144, :_reduce_94,
  2, 144, :_reduce_95,
  1, 124, :_reduce_96,
  2, 124, :_reduce_97,
  4, 146, :_reduce_98,
  3, 146, :_reduce_99,
  1, 146, :_reduce_100,
  3, 147, :_reduce_101,
  3, 147, :_reduce_102,
  2, 145, :_reduce_103,
  3, 149, :_reduce_104,
  2, 149, :_reduce_105,
  2, 148, :_reduce_106,
  4, 148, :_reduce_107,
  2, 127, :_reduce_108,
  5, 151, :_reduce_109,
  4, 151, :_reduce_110,
  0, 152, :_reduce_none,
  2, 152, :_reduce_112,
  4, 152, :_reduce_113,
  3, 152, :_reduce_114,
  6, 128, :_reduce_115,
  5, 128, :_reduce_116,
  0, 153, :_reduce_none,
  4, 153, :_reduce_118,
  3, 153, :_reduce_119,
  5, 126, :_reduce_120,
  1, 154, :_reduce_121,
  2, 154, :_reduce_122,
  5, 155, :_reduce_123,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 121, :_reduce_none,
  4, 121, :_reduce_127,
  1, 159, :_reduce_128,
  3, 159, :_reduce_129,
  3, 158, :_reduce_130,
  6, 125, :_reduce_131,
  2, 125, :_reduce_132,
  3, 160, :_reduce_133,
  3, 160, :_reduce_134,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  0, 111, :_reduce_137,
  1, 111, :_reduce_138,
  3, 111, :_reduce_139,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  3, 162, :_reduce_146,
  3, 162, :_reduce_147,
  3, 162, :_reduce_148,
  6, 129, :_reduce_149,
  6, 130, :_reduce_150,
  7, 118, :_reduce_151,
  7, 118, :_reduce_152,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  7, 131, :_reduce_155,
  1, 169, :_reduce_156,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 170, :_reduce_none,
  2, 170, :_reduce_160,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  4, 133, :_reduce_163,
  3, 133, :_reduce_164,
  7, 132, :_reduce_165,
  6, 132, :_reduce_166,
  1, 172, :_reduce_167,
  3, 172, :_reduce_168,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 174, :_reduce_171,
  1, 174, :_reduce_none,
  1, 175, :_reduce_173,
  3, 175, :_reduce_174,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 173, :_reduce_none,
  2, 173, :_reduce_178,
  6, 135, :_reduce_179,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_187,
  1, 166, :_reduce_188,
  2, 166, :_reduce_189,
  2, 166, :_reduce_190,
  4, 166, :_reduce_191,
  4, 166, :_reduce_192,
  1, 150, :_reduce_193,
  3, 150, :_reduce_194,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  3, 180, :_reduce_199,
  1, 180, :_reduce_200,
  2, 181, :_reduce_201,
  2, 179, :_reduce_202,
  1, 182, :_reduce_203,
  4, 182, :_reduce_204,
  4, 136, :_reduce_205,
  5, 137, :_reduce_206,
  7, 137, :_reduce_207,
  1, 123, :_reduce_208,
  1, 138, :_reduce_209,
  1, 138, :_reduce_210,
  1, 138, :_reduce_211,
  1, 138, :_reduce_212,
  1, 138, :_reduce_213,
  1, 138, :_reduce_214,
  4, 139, :_reduce_215,
  2, 139, :_reduce_216,
  4, 139, :_reduce_217,
  2, 139, :_reduce_218,
  3, 140, :_reduce_219,
  4, 140, :_reduce_220,
  2, 140, :_reduce_221,
  1, 185, :_reduce_222,
  3, 185, :_reduce_223,
  3, 186, :_reduce_224,
  1, 187, :_reduce_none,
  1, 187, :_reduce_226,
  1, 184, :_reduce_227,
  3, 184, :_reduce_228,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 189, :_reduce_238,
  1, 189, :_reduce_239,
  2, 190, :_reduce_240,
  1, 192, :_reduce_241,
  1, 194, :_reduce_242,
  1, 195, :_reduce_243,
  2, 193, :_reduce_244,
  1, 196, :_reduce_245,
  1, 197, :_reduce_246,
  2, 197, :_reduce_247,
  2, 191, :_reduce_248,
  2, 198, :_reduce_249,
  2, 198, :_reduce_250,
  3, 103, :_reduce_251,
  0, 183, :_reduce_none,
  1, 183, :_reduce_none,
  0, 199, :_reduce_254,
  2, 199, :_reduce_255,
  4, 199, :_reduce_256,
  1, 134, :_reduce_257,
  3, 134, :_reduce_258,
  5, 134, :_reduce_259,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 143, :_reduce_262,
  1, 141, :_reduce_263,
  0, 115, :_reduce_none,
  1, 115, :_reduce_265,
  0, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  0, 157, :_reduce_288 ]

racc_reduce_n = 289

racc_shift_n = 515

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :WSLPAREN => 26,
  :LPAREN => 27,
  :RPAREN => 28,
  :ISEQUAL => 29,
  :GREATEREQUAL => 30,
  :GREATERTHAN => 31,
  :LESSTHAN => 32,
  :IF => 33,
  :ELSE => 34,
  :DEFINE => 35,
  :ELSIF => 36,
  :VARIABLE => 37,
  :CLASS => 38,
  :INHERITS => 39,
  :NODE => 40,
  :BOOLEAN => 41,
  :NAME => 42,
  :SEMIC => 43,
  :CASE => 44,
  :DEFAULT => 45,
  :AT => 46,
  :ATAT => 47,
  :LCOLLECT => 48,
  :RCOLLECT => 49,
  :CLASSREF => 50,
  :NOT => 51,
  :OR => 52,
  :AND => 53,
  :UNDEF => 54,
  :PARROW => 55,
  :PLUS => 56,
  :MINUS => 57,
  :TIMES => 58,
  :DIV => 59,
  :LSHIFT => 60,
  :RSHIFT => 61,
  :UMINUS => 62,
  :MATCH => 63,
  :NOMATCH => 64,
  :REGEX => 65,
  :IN_EDGE => 66,
  :OUT_EDGE => 67,
  :IN_EDGE_SUB => 68,
  :OUT_EDGE_SUB => 69,
  :IN => 70,
  :UNLESS => 71,
  :PIPE => 72,
  :LAMBDA => 73,
  :SELBRACE => 74,
  :NUMBER => 75,
  :HEREDOC => 76,
  :SUBLOCATE => 77,
  :RENDER_STRING => 78,
  :RENDER_EXPR => 79,
  :EPP_START => 80,
  :EPP_END => 81,
  :EPP_END_TRIM => 82,
  :FUNCTION => 83,
  :TYPE => 84,
  :PRIVATE => 85,
  :ATTR => 86,
  :APPLICATION_R => 87,
  :CONSUMES_R => 88,
  :PRODUCES_R => 89,
  :SITE_R => 90,
  :APPLICATION => 91,
  :PRODUCES => 92,
  :CONSUMES => 93,
  :SITE => 94,
  :LOW => 95,
  :HIGH => 96,
  :LISTSTART => 97,
  :SPLAT => 98,
  :MODULO => 99 }

racc_nt_base = 100

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "WSLPAREN",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "TYPE",
  "PRIVATE",
  "ATTR",
  "APPLICATION_R",
  "CONSUMES_R",
  "PRODUCES_R",
  "SITE_R",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "capability_mapping",
  "call_function_expression",
  "bracketed_expression",
  "selector_entries",
  "expressions",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "type_alias",
  "type_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "call_function_start",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "optional_statements",
  "collection_entries",
  "hashpairs",
  "hashpair",
  "collection_entry",
  "collection_entry_keyword",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 140)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 147)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2], val[1], val[4])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_37(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_38(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_39(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_40(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_41(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_42(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_43(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_44(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_45(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_46(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_47(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_48(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_49(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_50(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_51(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_52(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_53(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_54(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_55(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_56(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_57(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_58(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_59(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 222)
  def _reduce_60(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_61(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_62(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 235)
  def _reduce_63(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_85(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_86(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_87(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_88(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 265)
  def _reduce_89(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_90(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 278)
  def _reduce_91(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 282)
  def _reduce_92(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[4]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_93(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_94(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 294)
  def _reduce_95(val, _values, result)
     result = Factory.QNAME(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_96(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 300)
  def _reduce_97(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_98(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_99(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 305)
  def _reduce_100(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_101(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_102(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_103(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_104(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 327)
  def _reduce_105(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 331)
  def _reduce_106(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_107(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_108(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 347)
  def _reduce_109(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_110(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 111 omitted

module_eval(<<'.,.,', 'egrammar.ra', 359)
  def _reduce_112(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 363)
  def _reduce_113(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 367)
  def _reduce_114(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 374)
  def _reduce_115(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 378)
  def _reduce_116(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 117 omitted

module_eval(<<'.,.,', 'egrammar.ra', 388)
  def _reduce_118(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 392)
  def _reduce_119(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 399)
  def _reduce_120(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 405)
  def _reduce_121(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 406)
  def _reduce_122(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 411)
  def _reduce_123(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 427)
  def _reduce_127(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 432)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_129(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_130(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 448)
  def _reduce_131(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 452)
  def _reduce_132(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 457)
  def _reduce_133(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 458)
  def _reduce_134(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_137(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_138(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 469)
  def _reduce_139(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 488)
  def _reduce_146(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 492)
  def _reduce_147(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 496)
  def _reduce_148(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 505)
  def _reduce_149(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 516)
  def _reduce_150(val, _values, result)
        result = add_definition(Factory.APPLICATION(classname(val[1][:value]), val[2], val[4]))
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 522)
  def _reduce_151(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        Factory.QNAME(classname(val[0][:value])),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 529)
  def _reduce_152(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        val[0],
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_155(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 556)
  def _reduce_156(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'egrammar.ra', 565)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 161 omitted

# reduce 162 omitted

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_163(val, _values, result)
        result = add_definition(Factory.SITE(val[2]))
    loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 586)
  def _reduce_164(val, _values, result)
        result = add_definition(Factory.SITE(nil))
    loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_165(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_166(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_167(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_168(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 169 omitted

# reduce 170 omitted

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_171(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 172 omitted

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_173(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_174(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_178(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_179(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_187(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_188(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_189(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_190(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_191(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_192(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_193(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_194(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_199(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_200(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_201(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_202(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_203(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_204(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_205(val, _values, result)
          result = add_definition(Factory.TYPE_ASSIGNMENT(val[1], val[3]))
      loc(result, val[0], val[3])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_206(val, _values, result)
            result = add_definition(Factory.TYPE_DEFINITION(val[1][:value], nil, val[3]))
        loc(result, val[0], val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_207(val, _values, result)
            result = add_definition(Factory.TYPE_DEFINITION(val[1][:value], val[3][:value], val[5]))
        loc(result, val[0], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_208(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 718)
  def _reduce_209(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 719)
  def _reduce_210(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_211(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_212(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 722)
  def _reduce_213(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 723)
  def _reduce_214(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 729)
  def _reduce_215(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 730)
  def _reduce_216(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 731)
  def _reduce_217(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 732)
  def _reduce_218(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 735)
  def _reduce_219(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 736)
  def _reduce_220(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 737)
  def _reduce_221(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 740)
  def _reduce_222(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 741)
  def _reduce_223(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 744)
  def _reduce_224(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 225 omitted

module_eval(<<'.,.,', 'egrammar.ra', 748)
  def _reduce_226(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 751)
  def _reduce_227(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 752)
  def _reduce_228(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

module_eval(<<'.,.,', 'egrammar.ra', 769)
  def _reduce_238(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 770)
  def _reduce_239(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 772)
  def _reduce_240(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 773)
  def _reduce_241(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 774)
  def _reduce_242(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 775)
  def _reduce_243(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 776)
  def _reduce_244(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 777)
  def _reduce_245(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 780)
  def _reduce_246(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 781)
  def _reduce_247(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 784)
  def _reduce_248(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 787)
  def _reduce_249(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 788)
  def _reduce_250(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 791)
  def _reduce_251(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 252 omitted

# reduce 253 omitted

module_eval(<<'.,.,', 'egrammar.ra', 798)
  def _reduce_254(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 799)
  def _reduce_255(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 800)
  def _reduce_256(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 803)
  def _reduce_257(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 804)
  def _reduce_258(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 805)
  def _reduce_259(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 260 omitted

# reduce 261 omitted

module_eval(<<'.,.,', 'egrammar.ra', 811)
  def _reduce_262(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 814)
  def _reduce_263(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 264 omitted

module_eval(<<'.,.,', 'egrammar.ra', 820)
  def _reduce_265(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

module_eval(<<'.,.,', 'egrammar.ra', 849)
  def _reduce_288(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
